#!/bin/sh
#
############################################################################
#
# MODULE:       	r.catchment
# AUTHOR(S):		Isaac Ullah, Arizona State University
# PURPOSE:		Creates a raster buffer of specified area around vector points
#			using cost distances. Module requires r.walk.
# ACKNOWLEDGEMENTS:	National Science Foundation Grant #BCS0410269 
# COPYRIGHT:		(C) 2007 by Isaac Ullah, Michael Barton, Arizona State University
#			This program is free software under the GNU General Public
#			License (>=v2). Read the file COPYING that comes with GRASS
#			for details.
#
#############################################################################


#%Module
#%  description: Creates a raster buffer of specified area around vector points using cost distances. Requires r.walk.
#%END

#%option
#% key: incost
#% type: string
#% gisprompt: old,cell,raster
#% description: Input cost map (if none specified, one will be created with r.walk)
#% required : no
#%END
#%option
#% key: elev
#% type: string
#% gisprompt: old,cell,raster
#% description: Input elevation map (DEM)
#% required : no
#%END
#%option
#% key: vect
#% type: string
#% gisprompt: old,vector,vector
#% description: Name of input vector site points map
#% required : yes
#%END
#%option
#% key: frict
#% type: string
#% gisprompt: old,cell,raster
#% description: Optional map of friction costs. If no map selected, default friction=1 making output reflect time costs only
#% answer:
#% required : no
#%END
#%option
#% key: a
#% type: double
#% description: Coefficients for walking energy formula parameters a,b,c,d
#% answer: 0.72
#% required : no
#%END
#%option
#% key: b
#% type: double
#% description:
#% answer: 6.0
#% required : no
#%END
#%option
#% key: c
#% type: double
#% description:
#% answer: 1.9998
#% required : no
#%END
#%option
#% key: d
#% type: double
#% description:
#% answer: -1.9998
#% required : no
#%END
#%option
#% key: lambda
#% type: double
#% description: Lambda value for cost distance calculation
#% answer: 0
#% required : no
#%END
#%option
#% key: slope_factor
#% type: double
#% description: Slope factor determines travel energy cost per height step
#% answer: -0.2125
#% required : no
#%END
#%option
#% key: buffer
#% type: string
#% gisprompt: old,cell,raster
#% description: Output buffer map
#% required : yes
#%END
#%option
#% key: sigma
#% type: double
#% description: Slope threshold for mask
#% answer: 
#% required : no
#%END
#%option
#% key: area
#% type: integer
#% description: Area of buffer (Integer value to nearest 100 square map units)
#% answer: 5000000
#% required : yes
#%END
#%option
#% key: start_step
#% type: integer
#% description: Optional starting cost distance value (if none entered, starting step willbe 1)
#% answer: 1
#% required : no
#%END
#%option
#% key: step_size
#% type: integer
#% description: Integer length of iteration step. (smaller values will create buffers closer to actual specified area, but will take significantly longer. ie. there will be more iteration steps)
#% answer: 10
#% required : yes
#%END
#%option
#% key: mapval
#% type: integer
#% description: Integer vlaue for out put catchment area (all other areas will be Null)
#% answer: 1
#% required : yes
#%END
#%flag
#% key: k
#% description: -k Use knight's move for calculating cost surface (slower but more accurate)
#%END
#%flag
#% key: o
#% description: -o Overwrite existing output buffer map
#%END
#%flag
#% key: c
#% description: -c Keep output cost surface
#%END



if  [ -z "$GISBASE" ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

incost=$GIS_OPT_incost
elev=$GIS_OPT_elev
vect=$GIS_OPT_vect
input_frict=$GIS_OPT_frict
lmbda=$GIS_OPT_lambda
echo "lambda=$lmbda"
slpfct=$GIS_OPT_slope_factor
echo "slope_factor=$slpfct"
a=$GIS_OPT_a
b=$GIS_OPT_b
c=$GIS_OPT_c
d=$GIS_OPT_d
echo "a,b,c,d=$a,$b,$c,$d"
sigma=$GIS_OPT_sigma
echo "sigma=$sigma"
area=$GIS_OPT_area
echo "Wanted buffer area=$area"
stepsize=$GIS_OPT_step_size
echo "iteration step size=$stepsize"
buffer=$GIS_OPT_buffer
echo "Output buffer=$buffer"
cost="temporary.cost"
slope="temporary.slope"
frict="temporary.friction"
mapval=$GIS_OPT_mapval




g.region -g rast=$elev

echo ""
echo "Checking for the existance of an input cost surface"
echo ""

if [ -n "$GIS_OPT_incost" ]; then

echo ""
echo "*************************"
echo "step 1 of 4: Using input cost surface"
echo "*************************"
echo ""

cost=$incost

else

echo ""
echo "*************************"
echo "step 1 of 4: Calculating cost surface"
echo "*************************"
echo ""

if [ -n "$GIS_OPT_frict" ]; then

r.mapcalc "$frict=$input_frict"

echo "Calculating costs using input friction map"

else


r.mapcalc "$frict=if(isnull($elev), null(), 1)"

echo "Calculating for time costs only"

fi


if [ "$GIS_FLAG_k" -eq 1 ]; then

echo "Using Knight's move"

r.walk --q elevation=$elev friction=$frict output=$cost start_points=$vect lambda=$lmbda percent_memory=100 nseg=4 walk_coeff=$a,$b,$c,$d slope_factor=$slpfct -k

else

r.walk --q elevation=$elev friction=$frict output=$cost start_points=$vect lambda=$lmbda percent_memory=100 nseg=4 walk_coeff=$a,$b,$c,$d slope_factor=$slpfct

fi

fi

echo ""
echo "*************************"
echo "step 2 of 4: Creating optionalslope mask"
echo "*************************"
echo ""



if [ -n "$GIS_OPT_sigma" ]; then

r.slope.aspect --q elevation=$elev slope=$slope

r.mapcalc "MASK=if ($slope <= $sigma, 1, null())"
else
echo	    "No slope mask created"
fi

echo ""
echo "*************************"
echo "step 3 of 4: Calculating buffer. This will start a loop and may take some time. Please do not interrupt the process until it has finished"
echo "*************************"
echo ""


#r.info -r input=$cost > $TMP2
#r.describe map=$cost > $TMP2
#cut -d'-' -f2 $TMP2 > $TMP4

max=`eval r.info -r map=$cost | grep "max=" | cut -d"=" -f2 | cut -d'.' -f1`

echo "max travel cost across the landscape from originating point = $max"


if [ -n "$GIS_OPT_start_step" ]; then

step=$GIS_OPT_start_step

else

step=1

fi

tmparea=0


while [ "$step" -le "$max" ]
do
	step=$(($step+$stepsize))
	
oldarea=$(echo "scale=0; $tmparea/2" | bc)

	echo "current cost distance from originating point = $step"
	
	echo "0 thru $step = $mapval" | r.reclass --q input=$cost output=cost.reclass --o
	
	tmparea=`eval r.stats -n -a fs=- input=cost.reclass | cut -d'-' -f2 | cut -d'.' -f1`
		
	echo "current integer area = $tmparea"

 if [ $tmparea -ge $area ]
 then
   break  # Skip entire rest of loop.
 fi

stepsize=$(echo "scale=0; 1 + ( 100 * ( $tmparea - $oldarea ) / $tmparea)" | bc)



done

echo ""
echo ""
echo "*************************"
echo ""
echo ""
echo -n "Final area of modeled catchment = $tmparea"
echo ""
echo ""
echo "*************************"
echo "step 4 of 4: Creating output map"
echo "*************************"
echo ""

if [ "$GIS_FLAG_o" -eq 0 ]; then

r.mapcalc "$buffer= if (cost.reclass, cost.reclass)"

else

outfile=`echo $buffer | cut -d'@' -f1` 

r.mapcalculator  amap=cost.reclass formula='if (A, A, null())' outfile=$outfile --overwrite

fi





if [ "$GIS_FLAG_c" -eq 1 ]; then

g.remove rast=MASK

cost_surf=$GIS_OPT_buffer"_cost_surface"

r.mapcalc "$cost_surf=temporary.cost"

echo ""
echo "Cleaning up..."
echo ""

if [ -n "$GIS_OPT_incost" ]; then

g.remove rast=cost.reclass,$slope,$frict

else

g.remove rast=cost.reclass,$slope,$frict,$cost

fi

echo ""
echo "DONE!"
echo ""
echo "final buffer map = $buffer"
echo ""
echo "cost surface kept:"
echo ""
echo "cost surface = $cost_surf"
echo ""

else

echo ""
echo "Cleaning up..."
echo ""

if [ -n "$GIS_OPT_incost" ]; then

g.remove rast=cost.reclass,$slope,$frict,MASK

else

g.remove rast=cost.reclass,$slope,$frict,MASK,$cost

fi

echo ""
echo "DONE!"
echo ""
echo "final buffer map = $buffer"
echo ""

fi


