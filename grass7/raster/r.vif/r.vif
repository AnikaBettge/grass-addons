#!/bin/sh
# 
#set -x
########################################################################
# 
# MODULE:       r.vif
# AUTHOR(S):    Paulo van Breugel <p.vanbreugel AT gmail.com>
# PURPOSE:      Calculate the variance inflaction factor of set of
#				variables. Alternatively, to speed the calculation up, 
#               this can be done for an user defined number of random 
#               cells.
# Dependency:	r.regression.multi
#
# COPYRIGHT: (C) 2013-2014 Paulo van Breugel
#            http://ecodiv.org
#            http://pvanb.wordpress.com/
# 
#            This program is free software under the GNU General Public 
#            License (>=v2). Read the file COPYING that comes with GRASS 
#            for details. 
# 
########################################################################
#
#%Module 
#% description: Calculate the variance inflaction factor
#%End 

#%option
#% key: maps
#% type: string
#% gisprompt: old,cell,raster
#% description: variables
#% key_desc: name
#% required: yes
#% multiple: yes
#%end

#%option
#% key: output_file
#% type: string
#% gisprompt: new
#% description: Name of output text file
#% key_desc: name
#% required: no
#%end

#%option
#% key: nsp
#% type: string
#% gisprompt: new
#% description: random sample size
#% key_desc: number or percentage
#% required: no
#%end

#=======================================================================
## GRASS team recommandations
#=======================================================================

## Check if in GRASS
if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

## check for awk
if [ ! -x "$(which awk)" ] ; then
    g.message -e "<awk> required, please install <awk> or <gawk> first"
    exit 1
fi

## To parse the code into interactive menu
if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

## set environment so that awk works properly in all languages ##
unset LC_ALL
export LC_NUMERIC=C

## what to do in case of user break:
exitprocedure()
{
    echo "User break!"
    cleanup
    exit 1
}

## shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

#=======================================================================
## function
#=======================================================================

cleanup()
{
   g.remove -f type=rast pattern="rnicheOVERLAP$$_*" --quiet
   g.remove -f type=rast pattern="rnicheEQUIV$$_*" --quiet
}
trap "cleanup" 2 3 15


#=======================================================================
## Check if input maps exist
#=======================================================================

OPF=${GIS_OPT_OUTPUT_FILE}
MAPS=${GIS_OPT_MAPS}
TEMP1=`g.tempfile pid=$$`

# test for missing input raster maps
oIFS=$IFS
IFS=,
for nvar in $MAPS ; do
    tstIN=`echo $nvar | awk 'BEGIN{FS="@"}{print $1}'`
    g.findfile element=cell file=${tstIN} > /dev/null
    if [ $? -gt 0 ] ; then 
        g.message -e 'The map '${tstIN}' is missing'
    exit 1
    fi
done
IFS=$oIFS
unset tstIN

#=======================================================================
## Test if text file exists. If so, append _v1 to file name
#=======================================================================

k=1
OPFN=$OPF
while [ -f "$OPF" ]; do
   a1=`echo $OPFN | awk -F. '{print $1}'`
   a2=`echo $OPFN | awk -F. '{print $2}'`
   OPF=${a1}_v${k}.${a2}
   k=$((k + 1))
done
if [ $k -gt 1 ]; then
   g.message -w "There is already a file $OPFN
   Will use ${OPF} instead"
fi

#=======================================================================
## Calculate VIF and write to standard output (& optionally to file)
#=======================================================================

# List with the input maps and first input map
MAPS=`echo $GIS_OPT_MAPS | sed 's;,; ;g'`
MAP1=`echo $MAPS | awk '{ print $1 }'`
eval `g.gisenv`

# Write text file with column headers
if [ -n "$OPF" ]; then 
    echo "variable,vif,sqrtvif" > "$OPF"
fi

if [ ! -z "$GIS_OPT_NSP" ]; then
    # Copy mask as backup if it exists
    eval `g.findfile element=cell file=MASK mapset=$MAPSET`
    remove_mask=1
    if [ $file ] ; then 
        g.copy rast=MASK,mask_r_vif_backup
        mask_exists=1
        unset file
    fi
    r.random input=$MAP1 n=$GIS_OPT_NSP raster_output=TMP_R_VIF_98765
    r.mask --overwrite raster=TMP_R_VIF_98765
fi

# Calculate VIF for each variable
MAPS=`echo $GIS_OPT_MAPS | sed 's;,; ;g'`
for nvar in ${MAPS} ; do
	expl=`echo $MAPS | eval sed '-e s/$nvar/''/g'`
	expl=`echo $expl | sed 's; ;,;g'`
	eval `r.regression.multi -g --quiet mapx=$expl mapy=$nvar`
	vif=`echo "1/(1-$Rsq)" | bc -l`
	sqrtvif=`echo "sqrt($vif)" | bc -l`
	
	# Write to std output
	echo "VIF for $nvar = "$vif
	echo "sqrt(VIF) for $nvar = "$sqrtvif
	
	# Write to user-defined txt file
	if [ -n "$OPF" ] ; then 
        echo "$nvar,$vif,$sqrtvif" >> "$OPF"
    fi
done

if [ $remove_mask ]; then
    g.remove -f type=rast name=MASK@${MAPSET},TMP_R_VIF_98765
    unset remove_mask
fi

if [ $mask_exists ]; then
    r.mask raster=mask_r_vif_backup
    g.remove -f type=rast name=mask_r_vif_backup
    unset mask_exist
fi






