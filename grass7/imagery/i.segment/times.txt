Segment ID storage - RAM vs SEG and speed access.

i.segment -w --overwrite --verbose group=landsat_1band@samples output=temp threshold=5 method=seg_time min=1

checking speed of RAM vs SEG vs get function performance
Access in the same region, so shouldn't have any disk I/O
repeating everything 100000000 times.
Using SEG: 2.63
Using array in RAM: 0.25
Using SEG w/ get(): 3.27
Using RAM w/ get(): 0.68
to check storage requirements... system dependent... :
unsigned char: 1
unsigned char pointer: 8
_Bool: 1
int: 4
unsigned int: 4
double: 8
repeating everything 100000 times.
Using rbtree (just build/destroy), 100 elements, time: 3.94
Using linked list and linkm (build/access/free), 100 elements, time: 0.3
Using rbtree, 1000 elements, time: 51.03
Using linked list and linkm, 1000 elements, time: 3.21


Storage requirement:

100,000,000 pixels


#######################################################################################
NC sample landsat images, lsat7_2000_10

g.region rast=lsat7_2000_10@landsat
rows:       475
cols:       527
cells:      250325

-w threshold=5

Pass number 1210

real	432m20.014s
user	429m55.276s
sys	1m0.640s


g.region s=222000 e=637000
cells:      56334
< 5 minutes


g.region s=220000 e=639000
cells: 94783

13 min (just one time test)


g.region s=223500
cells: 92752
Pass number 206:
real	4m53.324s

g.region s=222000
cells: 120683
pass 294
real	7m22.592s

g.region s=219000
cells: 176018
41min

typical i.segment options:
time i.segment -w --overwrite group=landsat1@user1 output=val threshold=5 method=region_growing endt=1000 final_mean=val_mean --verbose

threshold of 3 ran faster, but visually seemed oversegmented.



#########older data below

Using version from around June 20, SVN 52181, it does not remember fragment membership.

After some updates...June 26, SVN 52232.  (I don't recall changing anything to specifically improve things by this much ?!?)

50 x 50 = 2500 pixels

real	0m5.767s
user	0m5.704s
sys	0m0.028s

 0.00228 s/pixel


100 x 100 = 10,000 pixels 

real	4m8.335s
user	4m7.363s
sys	0m0.048s

0.0248 s/pixel


140 x 140 = 19,600 pixels

52181:
real	150m7.509s
user	149m27.656s
sys	0m9.025s

0.45 s/pixel

52232:

real	0m55.961s
user	0m52.655s
sys	0m3.040s



10k pixels, but [Raster MASK present]
52232:
real	1m43.085s
user	1m42.338s
sys	0m0.152s
10k pixels, but [Raster MASK present]

basic flag implementation:
real	0m47.079s
user	0m46.651s
sys	0m0.092s
[Raster MASK present]


19600 pixels
52232:
real	0m55.961s
user	0m52.655s
sys	0m3.040s

basic implementation:
real	1m4.718s
user	1m0.016s
sys	0m4.340s


Rough target:

10,000 x 10,000 = 100,000,000 pixels

10 hours?


removing squareroot
17s --> 4s at 50x50 resolution
23 --> 17s at 70x70


